function doPost(e) {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Bot Transactions");
    const configSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Config");

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Config Sheet
    const config = getConfigFromSheet(configSheet);

    let data;
    try {
        data = JSON.parse(e.postData.contents);
    } catch (error) {
        return ContentService.createTextOutput(JSON.stringify({
            fulfillmentText: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        })).setMimeType(ContentService.MimeType.JSON);
    }

    const intent = data.queryResult.intent.displayName;
    const params = data.queryResult.parameters;
    const source = data.originalDetectIntentRequest.source;
    let responseText = "";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö intent ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    if (intent === "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå") {
        const fileUrl = params.fileUrl; // ‡∏£‡∏±‡∏ö URL ‡πÑ‡∏ü‡∏•‡πå PDF/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Dialogflow

        if (!fileUrl) {
            return ContentService.createTextOutput(JSON.stringify({
                fulfillmentText: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
            })).setMimeType(ContentService.MimeType.JSON);
        }

        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        const extractedText = extractTextFromFile(fileUrl, config.ocrConfig);

        if (!extractedText) {
            return ContentService.createTextOutput(JSON.stringify({
                fulfillmentText: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ"
            })).setMimeType(ContentService.MimeType.JSON);
        }

        // 2. ‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const aiAnalysis = callAIService(
            config.aiConfig.model,
            config.aiConfig.prompt.replace("{text}", extractedText)
        );

        // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
        const date = new Date();
        const formattedDate = Utilities.formatDate(date, "Asia/Bangkok", "dd MMM yyyy");
        sheet.appendRow([formattedDate, "analyzed", "-", aiAnalysis, "AI Analysis", source]);

        responseText = `‚úÖ ‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß!\nüìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: ${extractedText}\nüß† ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå AI: ${aiAnalysis}`;

    } else if (intent === "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤_OCR") {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OCR ‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó
        const ocrLanguage = params.ocrLanguage || "th";
        const ocrEngine = params.ocrEngine || "vision";

        updateConfig(configSheet, "ocr", {
            language: ocrLanguage,
            engine: ocrEngine
        });

        responseText = `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OCR ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\nüî§ ‡∏†‡∏≤‡∏©‡∏≤: ${ocrLanguage}\nüîß Engine: ${ocrEngine}`;

    } else if (intent === "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤_AI") {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI ‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó
        const aiModel = params.aiModel || "gpt-4";
        const aiPrompt = params.aiPrompt || "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n\n{text}";

        updateConfig(configSheet, "ai", {
            model: aiModel,
            prompt: aiPrompt
        });

        responseText = `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\nü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${aiModel}\nüìù ‡∏û‡∏£‡∏≠‡∏°‡∏û‡πå: ${aiPrompt}`;

    } else if (intent === "‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤") {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        responseText = `üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n\n` +
                       `üìã OCR:\n- ‡∏†‡∏≤‡∏©‡∏≤: ${config.ocrConfig.language}\n- Engine: ${config.ocrConfig.engine}\n\n` +
                       `ü§ñ AI:\n- ‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${config.aiConfig.model}\n- ‡∏û‡∏£‡∏≠‡∏°‡∏û‡πå: ${config.aiConfig.prompt}`;

    } else {
        responseText = "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö";
    }

    return ContentService.createTextOutput(JSON.stringify({
        fulfillmentText: responseText
    })).setMimeType(ContentService.MimeType.JSON);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Sheet
function getConfigFromSheet(sheet) {
    const config = {
        ocrConfig: {
            language: "th",
            engine: "vision"  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        },
        aiConfig: {
            model: "gpt-4",  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            prompt: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n\n{text}"
        }
    };

    try {
        const data = sheet.getDataRange().getValues(); // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï
        for (let i = 1; i < data.length; i++) {        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 
            const row = data[i];
            if (row[0] === "ocr" && row[1]) {
                try {
                    // ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    const ocrSettings = JSON.parse(row[1]);
                    config.ocrConfig = {...config.ocrConfig, ...ocrSettings};
                } catch (error) {
                    Logger.log("Error parsing OCR config JSON: " + error);
                }
            } else if (row[0] === "ai" && row[1]) {
                try {
                    // ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    const aiSettings = JSON.parse(row[1]);
                    config.aiConfig = {...config.aiConfig, ...aiSettings};
                } catch (error) {
                    Logger.log("Error parsing AI config JSON: " + error);
                }
            }
        }
    } catch (e) {
        // ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        Logger.log("Error reading config: " + e);
    }

    return config;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function callAI(prompt, config) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
    const model = config.aiConfig.model || "gpt-4"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    const apiKey = getApiKey(model);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (model.includes("gpt")) {
        return callOpenAI(model, prompt, apiKey);
    } else if (model.includes("claude")) {
        return callAnthropic(model, prompt, apiKey);
    } else if (model.includes("gemini")) {
        return callGemini(model, prompt, apiKey);
    } else if (model.includes("mistral")) {
        return callMistral(model, prompt, apiKey);
    } else {
        return "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á API key ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
function getApiKey(model) {
    const scriptProperties = PropertiesService.getScriptProperties();
    
    if (model.includes("gpt")) {
        return scriptProperties.getProperty("OPENAI_API_KEY");
    } else if (model.includes("claude")) {
        return scriptProperties.getProperty("ANTHROPIC_API_KEY");
    } else if (model.includes("gemini")) {
        return scriptProperties.getProperty("GEMINI_API_KEY");
    } else if (model.includes("mistral")) {
        return scriptProperties.getProperty("MISTRAL_API_KEY");
    }
    
    return null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ OCR ‡∏ï‡∏≤‡∏° engine ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function performOCR(fileUrl, config) {
    const engine = config.ocrConfig.engine || "vision"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    const language = config.ocrConfig.language || "th"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OCR ‡∏ï‡∏≤‡∏° engine ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (engine === "vision") {
        return googleVisionOCR(fileUrl, language);
    } else if (engine === "gemini") {
        return geminiOCR(fileUrl);
    } else if (engine === "gpt4") {
        return gpt4VisionOCR(fileUrl);
    } else if (engine === "claude") {
        return claudeOCR(fileUrl);
    } else {
        return "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö OCR engine ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    }
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Google Drive API
function extractTextFromFile(fileUrl, ocrConfig) {
    try {
        const fileId = fileUrl.split("/d/")[1].split("/")[0]; // ‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å URL
        const file = DriveApp.getFileById(fileId);
        const mimeType = file.getMimeType();

        if (mimeType.includes("image")) {
            return extractTextFromImage(file, ocrConfig);
        } else if (mimeType.includes("pdf")) {
            return extractTextFromPDF(file, ocrConfig);
        } else {
            return null;
        }
    } catch (error) {
        Logger.log("Error extracting text: " + error);
        return null;
    }
}

// üìå ‡πÉ‡∏ä‡πâ Google Drive API ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function extractTextFromPDF(file, ocrConfig) {
    const resource = {
        title: file.getName(),
        mimeType: file.getMimeType()
    };

    const options = {
        ocr: true,
        ocrLanguage: ocrConfig.language || "th"
    };

    try {
        const text = Drive.Files.insert(resource, file.getBlob(), options).title;
        return text || null;
    } catch (error) {
        Logger.log("PDF OCR error: " + error);
        return null;
    }
}

// üìå ‡πÉ‡∏ä‡πâ Google Cloud Vision API ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function extractTextFromImage(file, ocrConfig) {
    const apiKey = PropertiesService.getScriptProperties().getProperty("VISION_API_KEY");

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å OCR ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    if (ocrConfig.engine === "vision") {
        const visionUrl = "https://vision.googleapis.com/v1/images:annotate?key=" + apiKey;

        const imageBlob = file.getBlob();
        const base64Image = Utilities.base64Encode(imageBlob.getBytes());

        const payload = {
            requests: [{
                image: { content: base64Image },
                features: [{ type: "TEXT_DETECTION" }],
                imageContext: {
                    languageHints: [ocrConfig.language || "th"]
                }
            }]
        };

        const options = {
            method: "post",
            contentType: "application/json",
            payload: JSON.stringify(payload)
        };

        try {
            const response = UrlFetchApp.fetch(visionUrl, options);
            const json = JSON.parse(response.getContentText());
            return json.responses?.[0]?.fullTextAnnotation?.text || null;
        } catch (error) {
            Logger.log("Vision API error: " + error);
            return null;
        }
    } else if (ocrConfig.engine === "document-ai") {
        // ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡πÉ‡∏ä‡πâ Document AI (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
        const docaiKey = PropertiesService.getScriptProperties().getProperty("DOCUMENT_AI_KEY");
        const docaiProcessor = PropertiesService.getScriptProperties().getProperty("DOCUMENT_AI_PROCESSOR");

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Document AI API ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        // ...

        return "‡πÉ‡∏ä‡πâ Document AI: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤";
    }

    return null;
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function callAIService(model, prompt) {
    const aiService = PropertiesService.getScriptProperties().getProperty("AI_SERVICE");
    const apiKey = PropertiesService.getScriptProperties().getProperty("AI_API_KEY");

    if (!apiKey) return '‚ùå API Key ‡∏´‡∏≤‡∏¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AI service ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    if (aiService === "openai" || aiService === "auto") {
        return callOpenAI(model, prompt, apiKey);
    } else if (aiService === "anthropic") {
        return callAnthropic(model, prompt, apiKey);
    } else if (aiService === "gemini") {
        return callGemini(model, prompt, apiKey);
    } else {
        return "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AI Service: " + aiService;
    }
}

function callOpenAI(model, prompt, apiKey) {
    const url = "https://api.openai.com/v1/chat/completions";

    const options = {
        method: 'post',
        contentType: 'application/json',
        headers: {
            'Authorization': 'Bearer ' + apiKey,
            'Content-Type': 'application/json'
        },
        payload: JSON.stringify({
            model: model,
            messages: [
                { role: "system", content: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô" },
                { role: "user", content: prompt }
            ],
            max_tokens: 500
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.choices?.[0]?.message?.content || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å OpenAI";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î OpenAI: ' + error.message;
    }
}

function callAnthropic(model, prompt, apiKey) {
    const url = "https://api.anthropic.com/v1/messages";

    const options = {
        method: 'post',
        contentType: 'application/json',
        headers: {
            'x-api-key': apiKey,
            'anthropic-version': '2023-06-01',
            'Content-Type': 'application/json'
        },
        payload: JSON.stringify({
            model: model,
            messages: [
                { role: "user", content: prompt }
            ],
            max_tokens: 500
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.content?.[0]?.text || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Anthropic";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Anthropic: ' + error.message;
    }
}

function callGemini(model, prompt, apiKey) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;

    const options = {
        method: 'post',
        contentType: 'application/json',
        payload: JSON.stringify({
            contents: [
                {
                    parts: [
                        { text: prompt }
                    ]
                }
            ],
            generationConfig: {
                maxOutputTokens: 500
            }
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.candidates?.[0]?.content?.parts?.[0]?.text || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gemini";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Gemini: ' + error.message;
    }
}