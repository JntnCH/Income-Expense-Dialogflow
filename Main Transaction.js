//‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö SHEET_ID
const SHEET_ID = PropertiesService.getScriptProperties().getProperty('SHEET_ID');

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πà‡∏≠
const monthsThai = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];

function formatNumberWithIntl(number, locale, options) 
{ 
   try { 
      return new Intl.NumberFormat(locale, options).format(number);
      }catch (e) {
         return number; 
         
      } 
 }

/*
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
@param {Sheet} sheet - ‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@param {Sheet} dailyReportSheet - ‡∏ä‡∏µ‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô 
*/
function recordMonthlyBalance(sheet, dailyReportSheet) { 
   const today = new Date(); 
   const balance = dailyReportSheet.getRange("C10").getValue();
   
   const category = "‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   const detail = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏ì ‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"; // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   
   const formattedDate = today.getDate() + " " + monthsThai[today.getMonth()] + " " + today.getFullYear();

sheet.appendRow([ 
   formattedDate,  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
   "balance",      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
   balance,        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 
   detail,         // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 
   category,       // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà 
   "System"        // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤ 
   ]); 
}
/*
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Dialogflow ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
@param {object} e - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Dialogflow
@returns {TextOutput} ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dialogflow 
*/
function doPost(e) { 
   const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Bot Transactions"); 
   const dailyReportSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Daily report");
   const data = JSON.parse(e.postData.contents); 
   const intent = data.queryResult.intent.displayName; 
   const params = data.queryResult.parameters; 
   const source = data.originalDetectIntentRequest.source; 
   let responseText = "";

if (intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢" || intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö") 
{ 
   let category = "-"; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
   const amount = Number(params.amount); //‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 
   let detail = "-"; // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 
   const type = (intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢") ? "expense" : "income"; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢)

if (type === "expense") {
     category = params["Expense-category"]; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
     detail = params["Expense-categoryoriginal"]; // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
 } else {
     category = params["Income_category"]; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
     detail = params["Income_categoryoriginal"]; // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
 }
    const date = new Date();
    const formattedDate = date.getDate() + " " + monthsThai[date.getMonth()] + " " + date.getFullYear();

 // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ä‡∏µ‡∏ï
 sheet.appendRow([
     formattedDate, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
     type,         // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢)
     amount,       // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
     detail,       // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
     category,     // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
     source        // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤ (LINE, Telegram ‡∏Ø‡∏•‡∏Ø)
 ]);

 responseText = `üìù ‡∏â‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${detail}\nÔ∏èüéüÔ∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}\n\nüí∑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó\n\n‚úÖ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß `;

} else if (intent === "‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î") { 
   try { 
     const dailyReportValues = dailyReportSheet.getRange("C4:C10").getValues();
     const dailyIncome = formatNumberWithIntl(Number(dailyReportValues[0][0]), 'th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || 0;
     const dailyExpense = formatNumberWithIntl(Number(dailyReportValues[1][0]), 'th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || 0;
     const monthlyIncome = formatNumberWithIntl(Number(dailyReportValues[3][0]), 'th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || 0;
     const monthlyExpense = formatNumberWithIntl(Number(dailyReportValues[4][0]), 'th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || 0;
     const balance = formatNumberWithIntl(Number(dailyReportValues[6][0]), 'th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || 0;

     const today = new Date();
     const todayFormatted = Utilities.formatDate(today, "Asia/Bangkok", "dd MMM yyyy");

     const allTransactions = sheet.getDataRange().getValues();

     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
     const todayTransactions = allTransactions
         .filter((row, index) => index !== 0 && Utilities.formatDate(new Date(row[0]), "Asia/Bangkok", "dd MMM yyyy") === todayFormatted)
         .map(row => `${row[3]} ${row[2]} ‡∏ö‡∏≤‡∏ó`);

     responseText = `üóìÔ∏è ‡∏¢‡∏≠‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayFormatted}\n` +
                    `\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n` + (todayTransactions.length > 0 ? todayTransactions.join("\n") : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") +
                    `\n\nüí∏ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ  ${dailyIncome} ‡∏ö‡∏≤‡∏ó\n` +
                    `Ô∏èüõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ${dailyExpense} ‡∏ö‡∏≤‡∏ó\n\n` +
                    `üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ  ${monthlyIncome} ‡∏ö‡∏≤‡∏ó\n` +
                    `üìë ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ  ${monthlyExpense} ‡∏ö‡∏≤‡∏ó\n\n` +
                    `ü™ô ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${balance} ‡∏ö‡∏≤‡∏ó`;
 } 
 catch (error) 
 {
     responseText = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
  }

}

const today = new Date(); 
if (today.getDate() === 1) { 
    recordMonthlyBalance(sheet, dailyReportSheet);
}

  return ContentService.createTextOutput(JSON.stringify({ 
   "fulfillmentText": responseText 
   })).setMimeType(ContentService.MimeType.JSON);
}
