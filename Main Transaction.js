function formatNumberWithIntl(number, locale, options) {
  try {
    return new Intl.NumberFormat(locale, options).format(number);
  } catch (e) {
    return number;
  }
}

/*
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
@param {Sheet} sheet - ‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@param {Sheet} dailyReportSheet - ‡∏ä‡∏µ‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô 
*/
function recordMonthlyBalance(sheet, dailyReportSheet) {
  const today = new Date();
  const balance = dailyReportSheet.getRange("C10").getValue();
  const category = "‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô";
  const detail = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏ì ‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô";
  const formattedDate = today.getDate() + " " + CONFIG.MONTHS_THAI[today.getMonth()] + " " + today.getFullYear();
  
  sheet.appendRow([
    formattedDate,
    "balance",
    balance,
    detail,
    category,
    "System"
  ]);
}

/*
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Dialogflow ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
@param {object} e - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Dialogflow
@returns {TextOutput} ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dialogflow 
*/
function doPost(e) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(BOT_TRANSACTIONS_SHEET);
  const dailyReportSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(DAILY_REPORT_SHEET);
  const data = JSON.parse(e.postData.contents);
  const intent = data.queryResult.intent.displayName;
  const params = data.queryResult.parameters;
  const source = data.originalDetectIntentRequest.source;
  let responseText = "";
  
  if (intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢" || intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö") {
    let category = "-";
    const amount = Number(params.amount);
    let detail = "-";
    const type = (intent === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢") ? "expense" : "income";
    
    if (type === "expense") {
      category = params["Expense-category"];
      detail = params["Expense-categoryoriginal"];
    } else {
      category = params["Income_category"];
      detail = params["Income_categoryoriginal"];
    }
    const date = new Date();
    const formattedDate = date.getDate() + " " + CONFIG.MONTHS_THAI[date.getMonth()] + " " + date.getFullYear();
    // ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    sheet.appendRow([
      formattedDate, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      type,          // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
      amount,        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      detail,        // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      category,      // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      source         // ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
    ]);
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram
    if (source === "telegram") {
      responseText = `<b>üìù ‡∏â‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</b>\n` +
        `<b>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</b> ${detail}\n` +
        `<b>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</b> ${category}\n` +
        `<b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${formatNumberWithIntl(amount, 'th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‡∏ö‡∏≤‡∏ó\n` +
        `<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
    } else {
      responseText = `üìù ‡∏â‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${detail}\nÔ∏èüéüÔ∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}\n\nüí∑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó\n\n‚úÖ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß `;
    }
    
  } else if (intent === "‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î") {
    try {
      const dailyReportValues = dailyReportSheet.getRange("C4:C10").getValues();
      const formatOptions = { minimumFractionDigits: 2, maximumFractionDigits: 2 };
      const formatter = new Intl.NumberFormat('th-TH', formatOptions);
      const formatValue = (value) => {
        const num = Number(value);
        return isNaN(num) ? '0.00' : formatter.format(num);
      };
      
      const [dailyIncome, dailyExpense, , monthlyIncome, monthlyExpense, , balance] =
      dailyReportValues.map(row => formatValue(row[0]));
      
      const today = new Date();
      const todayFormatted = Utilities.formatDate(today, "Asia/Bangkok", "dd MMM yyyy");
      
      const allTransactions = sheet.getDataRange().getValues();
      const todayTransactions = allTransactions
        .filter((row, index) => index !== 0 && Utilities.formatDate(new Date(row[0]), "Asia/Bangkok", "dd MMM yyyy") === todayFormatted)
        .map(row => `${row[3]} ${formatValue(row[2])} ‡∏ö‡∏≤‡∏ó`);
      
      // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ <ol> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      if (source === "telegram") {
        const transactionList = todayTransactions.length > 0 ?
          `<ol>\n${todayTransactions.map(item => `<li>${item}</li>`).join('\n')}\n</ol>` :
          "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£";
        responseText = `<b>üóìÔ∏è ‡∏¢‡∏≠‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayFormatted}</b>\n\n` +
          `<b>üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b>\n${transactionList}\n\n` +
          `<b>üí∏ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:</b> ${dailyIncome} ‡∏ö‡∏≤‡∏ó\n` +
          `<b>üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:</b> ${dailyExpense} ‡∏ö‡∏≤‡∏ó\n\n` +
          `<b>üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</b> ${monthlyIncome} ‡∏ö‡∏≤‡∏ó\n` +
          `<b>üìë ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</b> ${monthlyExpense} ‡∏ö‡∏≤‡∏ó\n\n` +
          `<b>ü™ô ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</b> ${balance} ‡∏ö‡∏≤‡∏ó`;
      } else {
        responseText = `üóìÔ∏è ‡∏¢‡∏≠‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayFormatted}\n` +
          `\nüìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n` + (todayTransactions.length > 0 ? todayTransactions.join("\n") : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") +
          `\n\nüí∏ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ  ${dailyIncome} ‡∏ö‡∏≤‡∏ó\n` +
          `Ô∏èüõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ${dailyExpense} ‡∏ö‡∏≤‡∏ó\n\n` +
          `üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ  ${monthlyIncome} ‡∏ö‡∏≤‡∏ó\n` +
          `üìë ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ  ${monthlyExpense} ‡∏ö‡∏≤‡∏ó\n\n` +
          `ü™ô ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${balance} ‡∏ö‡∏≤‡∏ó`;
      }
    } catch (error) {
      responseText = source === "telegram" ?
        `<b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</b> ${error.message}` :
        `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
    }
  }
  
  const today = new Date();
  if (today.getDate() === 1) {
    recordMonthlyBalance(sheet, dailyReportSheet);
  }
  
  // ‡∏õ‡∏£‡∏±‡∏ö JSON response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ parse_mode: HTML
  const responseJson = source === "telegram" ?
    {
      "fulfillmentText": responseText,
      "fulfillmentMessages": [{
        "text": { "text": [responseText] },
        "platform": "TELEGRAM"
      }],
      "payload": {
        "telegram": {
          "text": responseText,
          "parse_mode": "HTML"
        }
      }
    } :
    { "fulfillmentText": responseText };
  
  return ContentService.createTextOutput(JSON.stringify(responseJson))
    .setMimeType(ContentService.MimeType.JSON);
}