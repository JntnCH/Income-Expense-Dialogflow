/**
 * ‡∏ö‡∏≠‡∏ó‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ OCR ‡πÅ‡∏•‡∏∞ AI
 * ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ AI ‡πÅ‡∏•‡∏∞ OCR ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢: OpenAI, Anthropic, Google, Mistral
 */

// ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
const SHEET_ID = "YOUR_SHEET_ID"; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏Ç‡∏≠‡∏á Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ POST ‡∏à‡∏≤‡∏Å Dialogflow
 */
function doPost(e) {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Bot Transactions");
    const configSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Config");

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Config Sheet
    const config = getConfigFromSheet(configSheet);

    let data;
    try {
        data = JSON.parse(e.postData.contents);
    } catch (error) {
        return ContentService.createTextOutput(JSON.stringify({
            fulfillmentText: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        })).setMimeType(ContentService.MimeType.JSON);
    }

    const intent = data.queryResult.intent.displayName;
    const params = data.queryResult.parameters;
    const source = data.originalDetectIntentRequest.source;
    let responseText = "";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö intent ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    if (intent === "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå") {
        const fileUrl = params.fileUrl; // ‡∏£‡∏±‡∏ö URL ‡πÑ‡∏ü‡∏•‡πå PDF/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Dialogflow

        if (!fileUrl) {
            return ContentService.createTextOutput(JSON.stringify({
                fulfillmentText: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
            })).setMimeType(ContentService.MimeType.JSON);
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const timestamp = new Date();
        sheet.appendRow([timestamp, "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå", fileUrl, source]);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        const extractedText = extractTextFromFile(fileUrl, config);

        if (!extractedText) {
            return ContentService.createTextOutput(JSON.stringify({
                fulfillmentText: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            })).setMimeType(ContentService.MimeType.JSON);
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
        const prompt = config.aiConfig.prompt.replace("{text}", extractedText);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        responseText = callAIService(prompt, config);

    } else if (intent === "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤_OCR") {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OCR
        const language = params.language || "th";
        const engine = params.engine || "vision";

        const ocrConfig = {
            language: language,
            engine: engine
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÉ‡∏ô Config Sheet
        updateConfig(configSheet, "ocr", ocrConfig);

        responseText = `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OCR ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:\n‡∏†‡∏≤‡∏©‡∏≤: ${language}\nEngine: ${engine}`;

    } else if (intent === "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤_AI") {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI
        const model = params.model || "gpt-4";
        const prompt = params.prompt || "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n\n{text}";

        const aiConfig = {
            model: model,
            prompt: prompt
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÉ‡∏ô Config Sheet
        updateConfig(configSheet, "ai", aiConfig);

        responseText = `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:\n‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${model}\nPrompt: ${prompt}`;

    } else if (intent === "‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤") {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        responseText = `üìù ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n\n` +
            `üîç OCR:\n` +
            `- ‡∏†‡∏≤‡∏©‡∏≤: ${config.ocrConfig.language}\n` +
            `- Engine: ${config.ocrConfig.engine}\n\n` +
            `ü§ñ AI:\n` +
            `- ‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${config.aiConfig.model}\n` +
            `- Prompt: ${config.aiConfig.prompt}`;
    } else {
        responseText = "‚ùì ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
    }

    return ContentService.createTextOutput(JSON.stringify({
        fulfillmentText: responseText
    })).setMimeType(ContentService.MimeType.JSON);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Sheet
 */
function getConfigFromSheet(sheet) {
    const config = {
        ocrConfig: {
            language: "th",
            engine: "vision"  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        },
        aiConfig: {
            model: "gpt-4",  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            prompt: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n\n{text}"
        }
    };

    try {
        const data = sheet.getDataRange().getValues(); // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï
        for (let i = 1; i < data.length; i++) {        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 
            const row = data[i];
            if (row[0] === "ocr" && row[1]) {
                try {
                    // ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    const ocrSettings = JSON.parse(row[1]);
                    config.ocrConfig = {...config.ocrConfig, ...ocrSettings};
                } catch (error) {
                    Logger.log("Error parsing OCR config JSON: " + error);
                }
            } else if (row[0] === "ai" && row[1]) {
                try {
                    // ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    const aiSettings = JSON.parse(row[1]);
                    config.aiConfig = {...config.aiConfig, ...aiSettings};
                } catch (error) {
                    Logger.log("Error parsing AI config JSON: " + error);
                }
            }
        }
    } catch (e) {
        // ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        Logger.log("Error reading config: " + e);
    }

    return config;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Sheet
 */
function updateConfig(sheet, type, configObj) {
    try {
        const data = sheet.getDataRange().getValues();
        let found = false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for (let i = 1; i < data.length; i++) {
            if (data[i][0] === type) {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                sheet.getRange(i + 1, 2).setValue(JSON.stringify(configObj));
                found = true;
                break;
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        if (!found) {
            sheet.appendRow([type, JSON.stringify(configObj)]);
        }

        return true;
    } catch (error) {
        Logger.log("Error updating config: " + error);
        return false;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Google Drive API
 */
function extractTextFromFile(fileUrl, config) {
    try {
        const fileId = fileUrl.split("/d/")[1].split("/")[0]; // ‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å URL
        const file = DriveApp.getFileById(fileId);
        const mimeType = file.getMimeType();

        // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OCR ‡∏à‡∏≤‡∏Å config
        const ocrConfig = config.ocrConfig || {
            language: "th",
            engine: "vision"
        };

        if (mimeType.includes("image")) {
            return extractTextFromImage(file, ocrConfig);
        } else if (mimeType.includes("pdf")) {
            return extractTextFromPDF(file, ocrConfig);
        } else {
            return null;
        }
    } catch (error) {
        Logger.log("Error extracting text: " + error);
        return null;
    }
}

/**
 * ‡πÉ‡∏ä‡πâ Google Drive API ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
function extractTextFromPDF(file, ocrConfig) {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å engine ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    const engine = ocrConfig.engine || "vision";
    
    if (engine === "vision" || engine === "document-ai") {
        const resource = {
            title: file.getName(),
            mimeType: file.getMimeType()
        };

        const options = {
            ocr: true,
            ocrLanguage: ocrConfig.language || "th"
        };

        try {
            const text = Drive.Files.insert(resource, file.getBlob(), options).title;
            return text || null;
        } catch (error) {
            Logger.log("PDF OCR error: " + error);
            return null;
        }
    } else if (engine === "gemini") {
        return geminiOCR(file, ocrConfig);
    } else if (engine === "gpt4") {
        return gpt4VisionOCR(file, ocrConfig);
    } else if (engine === "claude") {
        return claudeOCR(file, ocrConfig);
    } else {
        return "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö OCR engine: " + engine + " ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF";
    }
}

/**
 * ‡πÉ‡∏ä‡πâ Google Cloud Vision API ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 */
function extractTextFromImage(file, ocrConfig) {
    const engine = ocrConfig.engine || "vision";
    
    if (engine === "vision") {
        const apiKey = PropertiesService.getScriptProperties().getProperty("VISION_API_KEY");
        const visionUrl = "https://vision.googleapis.com/v1/images:annotate?key=" + apiKey;

        const imageBlob = file.getBlob();
        const base64Image = Utilities.base64Encode(imageBlob.getBytes());

        const payload = {
            requests: [{
                image: { content: base64Image },
                features: [{ type: "TEXT_DETECTION" }],
                imageContext: {
                    languageHints: [ocrConfig.language || "th"]
                }
            }]
        };

        const options = {
            method: "post",
            contentType: "application/json",
            payload: JSON.stringify(payload)
        };

        try {
            const response = UrlFetchApp.fetch(visionUrl, options);
            const json = JSON.parse(response.getContentText());
            return json.responses?.[0]?.fullTextAnnotation?.text || null;
        } catch (error) {
            Logger.log("Vision API error: " + error);
            return null;
        }
    } else if (engine === "document-ai") {
        // ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡πÉ‡∏ä‡πâ Document AI (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
        const docaiKey = PropertiesService.getScriptProperties().getProperty("DOCUMENT_AI_KEY");
        const docaiProcessor = PropertiesService.getScriptProperties().getProperty("DOCUMENT_AI_PROCESSOR");

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Document AI API ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        // ...

        return "‡πÉ‡∏ä‡πâ Document AI: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤";
    } else if (engine === "gemini") {
        return geminiOCR(file, ocrConfig);
    } else if (engine === "gpt4") {
        return gpt4VisionOCR(file, ocrConfig);
    } else if (engine === "claude") {
        return claudeOCR(file, ocrConfig);
    } else {
        return "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö OCR engine: " + engine;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini OCR
 */
function geminiOCR(file, ocrConfig) {
    const apiKey = PropertiesService.getScriptProperties().getProperty("GEMINI_API_KEY");
    if (!apiKey) return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gemini API Key";
    
    // ‡πÉ‡∏ä‡πâ Gemini 1.5 Flash ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    const model = "gemini-1.5-flash";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
    
    const imageBlob = file.getBlob();
    const base64Image = Utilities.base64Encode(imageBlob.getBytes());
    
    const language = ocrConfig.language || "th";
    const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö OCR ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤${language === "th" ? "‡πÑ‡∏ó‡∏¢" : language} ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö`;
    
    const payload = {
        contents: [
            {
                parts: [
                    { text: systemPrompt },
                    {
                        inline_data: {
                            mime_type: file.getMimeType(),
                            data: base64Image
                        }
                    }
                ]
            }
        ],
        generationConfig: {
            maxOutputTokens: 2048
        }
    };
    
    const options = {
        method: "post",
        contentType: "application/json",
        payload: JSON.stringify(payload)
    };
    
    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());
        return jsonResponse.candidates?.[0]?.content?.parts?.[0]?.text || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gemini OCR";
    } catch (error) {
        Logger.log("Gemini OCR error: " + error);
        return "üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Gemini OCR: " + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPT-4 Vision OCR
 */
function gpt4VisionOCR(file, ocrConfig) {
    const apiKey = PropertiesService.getScriptProperties().getProperty("OPENAI_API_KEY");
    if (!apiKey) return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö OpenAI API Key";
    
    // ‡πÉ‡∏ä‡πâ GPT-4o ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR
    const model = "gpt-4o";
    const url = "https://api.openai.com/v1/chat/completions";
    
    const imageBlob = file.getBlob();
    const base64Image = Utilities.base64Encode(imageBlob.getBytes());
    
    const language = ocrConfig.language || "th";
    const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö OCR ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤${language === "th" ? "‡πÑ‡∏ó‡∏¢" : language} ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö`;
    
    const payload = {
        model: model,
        messages: [
            {
                role: "system",
                content: systemPrompt
            },
            {
                role: "user",
                content: [
                    {
                        type: "image_url",
                        image_url: {
                            url: `data:${file.getMimeType()};base64,${base64Image}`
                        }
                    }
                ]
            }
        ],
        max_tokens: 1024
    };
    
    const options = {
        method: "post",
        contentType: "application/json",
        headers: {
            "Authorization": "Bearer " + apiKey,
            "Content-Type": "application/json"
        },
        payload: JSON.stringify(payload)
    };
    
    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());
        return jsonResponse.choices?.[0]?.message?.content || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å GPT-4 Vision OCR";
    } catch (error) {
        Logger.log("GPT-4 Vision OCR error: " + error);
        return "üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î GPT-4 Vision OCR: " + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Claude OCR
 */
function claudeOCR(file, ocrConfig) {
    const apiKey = PropertiesService.getScriptProperties().getProperty("ANTHROPIC_API_KEY");
    if (!apiKey) return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Anthropic API Key";
    
    // ‡πÉ‡∏ä‡πâ Claude 3 Opus ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
    const model = "claude-3-opus-20240229";
    const url = "https://api.anthropic.com/v1/messages";
    
    const imageBlob = file.getBlob();
    const base64Image = Utilities.base64Encode(imageBlob.getBytes());
    
    const language = ocrConfig.language || "th";
    const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö OCR ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤${language === "th" ? "‡πÑ‡∏ó‡∏¢" : language} ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö`;
    
    const payload = {
        model: model,
        messages: [
            {
                role: "user",
                content: [
                    {
                        type: "text",
                        text: systemPrompt
                    },
                    {
                        type: "image",
                        source: {
                            type: "base64",
                            media_type: file.getMimeType(),
                            data: base64Image
                        }
                    }
                ]
            }
        ],
        max_tokens: 1024
    };
    
    const options = {
        method: "post",
        contentType: "application/json",
        headers: {
            "x-api-key": apiKey,
            "anthropic-version": "2023-06-01",
            "Content-Type": "application/json"
        },
        payload: JSON.stringify(payload)
    };
    
    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());
        return jsonResponse.content?.[0]?.text || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Claude OCR";
    } catch (error) {
        Logger.log("Claude OCR error: " + error);
        return "üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Claude OCR: " + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
function callAIService(prompt, config) {
    // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI ‡∏à‡∏≤‡∏Å config
    const aiConfig = config.aiConfig || {
        model: "gpt-4",
        prompt: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n\n{text}"
    };
    
    const model = aiConfig.model || "gpt-4";
    
    // ‡∏î‡∏∂‡∏á API key ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const apiKey = getApiKey(model);
    if (!apiKey) return '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• ' + model;
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (model.includes("gpt")) {
        return callOpenAI(model, prompt, apiKey);
    } else if (model.includes("claude")) {
        return callAnthropic(model, prompt, apiKey);
    } else if (model.includes("gemini")) {
        return callGemini(model, prompt, apiKey);
    } else if (model.includes("mistral")) {
        return callMistral(model, prompt, apiKey);
    } else {
        return "‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• AI: " + model;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á API key ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
 */
function getApiKey(model) {
    const scriptProperties = PropertiesService.getScriptProperties();
    
    if (model.includes("gpt")) {
        return scriptProperties.getProperty("OPENAI_API_KEY");
    } else if (model.includes("claude")) {
        return scriptProperties.getProperty("ANTHROPIC_API_KEY");
    } else if (model.includes("gemini")) {
        return scriptProperties.getProperty("GEMINI_API_KEY");
    } else if (model.includes("mistral")) {
        return scriptProperties.getProperty("MISTRAL_API_KEY");
    }
    
    return null;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI
 */
function callOpenAI(model, prompt, apiKey) {
    const url = "https://api.openai.com/v1/chat/completions";
    
    // ‡∏õ‡∏£‡∏±‡∏ö system prompt ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
    let systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô";
    
    // ‡∏õ‡∏£‡∏±‡∏ö max_tokens ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
    let maxTokens = 500;
    if (model.includes("gpt-4")) {
        maxTokens = 1000; // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏π‡∏á
    }

    const options = {
        method: 'post',
        contentType: 'application/json',
        headers: {
            'Authorization': 'Bearer ' + apiKey,
            'Content-Type': 'application/json'
        },
        payload: JSON.stringify({
            model: model,
            messages: [
                { role: "system", content: systemPrompt },
                { role: "user", content: prompt }
            ],
            max_tokens: maxTokens
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.choices?.[0]?.message?.content || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å OpenAI";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î OpenAI: ' + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Anthropic
 */
function callAnthropic(model, prompt, apiKey) {
    const url = "https://api.anthropic.com/v1/messages";
    
    // ‡∏õ‡∏£‡∏±‡∏ö max_tokens ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
    let maxTokens = 500;
    if (model.includes("opus")) {
        maxTokens = 1000; // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏π‡∏á
    }

    const options = {
        method: 'post',
        contentType: 'application/json',
        headers: {
            'x-api-key': apiKey,
            'anthropic-version': '2023-06-01',
            'Content-Type': 'application/json'
        },
        payload: JSON.stringify({
            model: model,
            messages: [
                { role: "user", content: prompt }
            ],
            max_tokens: maxTokens
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.content?.[0]?.text || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Anthropic";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Anthropic: ' + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini
 */
function callGemini(model, prompt, apiKey) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
    
    // ‡∏õ‡∏£‡∏±‡∏ö max_tokens ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
    let maxTokens = 500;
    if (model.includes("pro")) {
        maxTokens = 1000; // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏π‡∏á
    }

    const options = {
        method: 'post',
        contentType: 'application/json',
        payload: JSON.stringify({
            contents: [
                {
                    parts: [
                        { text: prompt }
                    ]
                }
            ],
            generationConfig: {
                maxOutputTokens: maxTokens
            }
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.candidates?.[0]?.content?.parts?.[0]?.text || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gemini";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Gemini: ' + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Mistral
 */
function callMistral(model, prompt, apiKey) {
    const url = "https://api.mistral.ai/v1/chat/completions";
    
    // ‡∏õ‡∏£‡∏±‡∏ö max_tokens ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
    let maxTokens = 500;
    if (model.includes("large")) {
        maxTokens = 1000; // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏π‡∏á
    }

    const options = {
        method: 'post',
        contentType: 'application/json',
        headers: {
            'Authorization': 'Bearer ' + apiKey,
            'Content-Type': 'application/json'
        },
        payload: JSON.stringify({
            model: model,
            messages: [
                { role: "user", content: prompt }
            ],
            max_tokens: maxTokens
        })
    };

    try {
        const response = UrlFetchApp.fetch(url, options);
        const jsonResponse = JSON.parse(response.getContentText());

        return jsonResponse.choices?.[0]?.message?.content || "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Mistral";
    } catch (error) {
        return 'üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Mistral: ' + error.message;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
 */
function setupAPIKeys() {
    const scriptProperties = PropertiesService.getScriptProperties();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ API Keys ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    scriptProperties.setProperty("OPENAI_API_KEY", "YOUR_OPENAI_API_KEY");
    scriptProperties.setProperty("ANTHROPIC_API_KEY", "YOUR_ANTHROPIC_API_KEY");
    scriptProperties.setProperty("GEMINI_API_KEY", "YOUR_GEMINI_API_KEY");
    scriptProperties.setProperty("MISTRAL_API_KEY", "YOUR_MISTRAL_API_KEY");
    scriptProperties.setProperty("VISION_API_KEY", "YOUR_VISION_API_KEY");
    
    return "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
 */
function setupSheets() {
    try {
        const ss = SpreadsheetApp.openById(SHEET_ID);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        let transactionSheet = ss.getSheetByName("Bot Transactions");
        if (!transactionSheet) {
            transactionSheet = ss.insertSheet("Bot Transactions");
            transactionSheet.appendRow(["Timestamp", "Action", "File URL", "Source"]);
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        let configSheet = ss.getSheetByName("Config");
        if (!configSheet) {
            configSheet = ss.insertSheet("Config");
            configSheet.appendRow(["type", "config"]);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            configSheet.appendRow(["ocr", JSON.stringify({
                language: "th",
                engine: "vision"
            })]);
            
            configSheet.appendRow(["ai", JSON.stringify({
                model: "gpt-4",
                prompt: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:\n\n{text}"
            })]);
        }
        
        return "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheets ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
    } catch (error) {
        return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Sheets: " + error;
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 */
function testBot() {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    const configSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("Config");
    const config = getConfigFromSheet(configSheet);
    
    return JSON.stringify(config, null, 2);
}
